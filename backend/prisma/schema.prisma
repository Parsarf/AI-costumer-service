// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Shop {
  id                    Int      @id @default(autoincrement())
  shop                  String   @unique
  accessToken           String
  storeName             String?
  settings              Json?    @default("{\"welcomeMessage\":\"Hi! ðŸ‘‹ I'm here to help you with any questions about your order, returns, or our products. How can I assist you today?\",\"returnPolicy\":\"We accept returns within 30 days of purchase. Items must be unworn and in original packaging.\",\"shippingPolicy\":\"We ship within 1-2 business days. Domestic orders typically arrive in 3-5 business days.\",\"supportEmail\":\"support@example.com\",\"botPersonality\":\"friendly\",\"chatbotEnabled\":true,\"theme\":{\"primaryColor\":\"#4F46E5\",\"position\":\"bottom-right\"}}")
  active                Boolean  @default(true)
  subscriptionTier      String   @default("starter")
  subscriptionStatus    String   @default("trial")
  chargeId              String?
  conversationCount     Int      @default(0)
  conversationLimit     Int      @default(1000)
  installedAt           DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  conversations Conversation[]
  sessions      Session[]
  billingSubscription BillingSubscription?
  
  @@map("stores")
}

model Session {
  id        String   @id
  shop      String
  state     String
  isOnline  Boolean  @default(false)
  expires   DateTime?
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  shopId Int
  shopRelation Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model Conversation {
  id                String    @id @default(cuid())
  shopId            Int
  customerEmail     String?
  customerName      String?
  customerId        String?
  status            String    @default("active")
  escalated         Boolean   @default(false)
  escalationReason  String?
  metadata          Json      @default("{}")
  messageCount      Int       @default(0)
  lastMessageAt     DateTime  @default(now())
  resolvedAt        DateTime?
  sessionId         String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  shop      Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  messages  Message[]
  
  @@map("conversations")
}

model Message {
  id              Int      @id @default(autoincrement())
  conversationId  String
  role            String
  content         String
  metadata        Json     @default("{}")
  tokens          Int?
  responseTime    Int?
  aiModel         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

model BillingSubscription {
  id                String   @id @default(cuid())
  shopId            Int      @unique
  subscriptionId    String   @unique
  planName          String
  price             Float
  currency          String   @default("USD")
  status            String
  trialDays         Int      @default(7)
  trialEndsAt       DateTime?
  currentPeriodEnd  DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)
  
  @@map("billing_subscriptions")
}
